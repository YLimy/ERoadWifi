package com.e_road.ui.fragment;

import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.text.TextUtils;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.webkit.HttpAuthHandler;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebSettings.PluginState;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.ProgressBar;
import android.widget.Toast;

import cn.jpush.android.api.JPushInterface;

import com.alibaba.fastjson.JSONObject;
import com.e_road.R;
import com.e_road.utils.LoggerUtil;
import com.e_road.utils.WebViewDownLoadListener;

/**
 * 标签home显示的内容
 * 
 * @author CaiMeng
 * 
 */
public class AdsFragment extends Fragment {
	/** fragment初始化完成时加载的网址 */
	private String url_home = "http://www.baidu.com";
	/** webView控件 */
	private WebView webView;
	/** 进度条 */
	private ProgressBar progressBar;
	/** 网络是否可用 */
	private boolean isNetwork = true;
	/** 缓存网站链接 */
	private String urlCache = null;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.ads_fragment, container, false);
		findView(view);
		init();
		return view;
	}

	/**
	 * 查找view中的控件
	 * 
	 * @param view
	 */
	private void findView(View view) {
		webView = (WebView) view.findViewById(R.id.wv_ads_fragment);
		progressBar = (ProgressBar) view.findViewById(R.id.pb_ads_fragment);
	}

	/**
	 * 给控件绑定事件
	 */
	private void init() {
		setWebViewConfigure();
		setListener();
		
		Bundle bundle = getArguments();
		String type = bundle.getString(JPushInterface.EXTRA_EXTRA);
		JSONObject jsonObject = JSONObject.parseObject(type);
		//如果是网络链接，必须是http:// ;如果是本地文件路径则content：//
		String url = jsonObject.getString("url");
		if(!TextUtils.isEmpty(url)){
			LoggerUtil.d("AdsFragment_notif", "url=====>" + url);
			url_home = url;
		}
		
		webView.loadUrl(url_home);
	}

	/**
	 * 设置监听器
	 */
	private void setListener() {
		webView.setOnKeyListener(new OnKeyListener() {
			
			@Override
			public boolean onKey(View v, int keyCode, KeyEvent event) {
				//监听按键：按下
				if(event.getAction() == KeyEvent.ACTION_DOWN){
					//是否回退键
					if((keyCode == KeyEvent.KEYCODE_BACK) && webView.canGoBack()){
						webView.goBack();
						return true;
					}
				}
				return false;
			}
		});
		
		webView.setDownloadListener(new WebViewDownLoadListener(getActivity()));
		
//		webView.setDownloadListener(new DownloadListener() {
//			
//			@Override
//			public void onDownloadStart(String url, String userAgent,
//					String contentDisposition, String mimetype, long contentLength) {
//				//调用系统默认的浏览器
//				Uri uri = Uri.parse(url);
//				Intent intent = new Intent(Intent.ACTION_VIEW, uri);
//				startActivity(intent);
//			}
//		});
	}
	
	/**
	 * 配置WebView参数
	 */
	@SuppressLint("SetJavaScriptEnabled")
	@SuppressWarnings("deprecation")
	private void setWebViewConfigure() {
		WebSettings settings = webView.getSettings();
		// 支持JavaScript
		settings.setJavaScriptEnabled(true);
		// webView的内容全屏或者充满父框架
		settings.setLoadWithOverviewMode(true);
		// 设置任意比例缩放available
		settings.setUseWideViewPort(true);
		// 支持缩放
//		settings.setBuiltInZoomControls(true);
		// 支持flash插件，18版本后不再支持，因为adobe不发布移动新版本了
		settings.setPluginState(PluginState.ON);

		settings.supportZoom();
		settings.setAllowFileAccess(true);
		// 支持通过js打开新的窗口
		settings.setJavaScriptCanOpenWindowsAutomatically(true);
		settings.setLoadsImagesAutomatically(true);
		settings.setSavePassword(true);
		// settings.setLightTouchEnabled(true);//TODO 导致百度导航条混乱
		// settings.setUserAgentString("Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_4; zh-tw) "
		// +
		// "AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16");
		settings.setPluginsEnabled(true);

		// 取消滚动条
		webView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
		// 触摸焦点起作用
		webView.requestFocus();
		
		// 处理解析和网络渲染
		webView.setWebChromeClient(new WebChromeClient(){

			@Override
			public void onProgressChanged(WebView view, int newProgress) {
				if(newProgress == 100){
					progressBar.setVisibility(View.GONE);
				}else{
					if (progressBar.getVisibility() == View.GONE)
						progressBar.setVisibility(View.VISIBLE);
					progressBar.setProgress(newProgress);
				}
				super.onProgressChanged(view, newProgress);
			}
			
		});
		
		
		webView.setWebViewClient(new WebViewClient() {

			@Override
			public boolean shouldOverrideUrlLoading(WebView view, String url) {
//				// 超链接在当前webview中跳转，而不是调用浏览器
//				webView.loadUrl(url);
//				return true;
				return false;//防止重定向
			}

			@Override
			public void onPageStarted(WebView view, String url, Bitmap favicon) {
				// 页面加载开始时调用
				urlCache = url;
				LoggerUtil.d("AdsFragment_start", "=========>" + urlCache);
				if (!isNetwork) {
					// TODO 此处调用了两次 1.目标页面；2.404页面；
					Toast.makeText(getActivity(), "网络不可用",
							Toast.LENGTH_LONG).show();
					return;
				}
				super.onPageStarted(view, url, favicon);
			}

			@Override
			public void onPageFinished(WebView view, String url) {
				// TODO 页面加载结束时调用
				super.onPageFinished(view, url);
			}

			@Override
			public void onReceivedError(WebView view, int errorCode,
					String description, String failingUrl) {
				// TODO Auto-generated method stub
				super.onReceivedError(view, errorCode, description, failingUrl);
			}

			@Override
			public void onReceivedHttpAuthRequest(WebView view,
					HttpAuthHandler handler, String host, String realm) {
				// TODO Auto-generated method stub
				super.onReceivedHttpAuthRequest(view, handler, host, realm);
			}

		});

		IntentFilter mFilter = new IntentFilter();
		mFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
		getActivity().registerReceiver(mReceiver, mFilter);
	}

	/** 接收网络状态变更 */
	private BroadcastReceiver mReceiver = new BroadcastReceiver() {

		@Override
		public void onReceive(Context context, Intent intent) {
			ConnectivityManager connectManager = (ConnectivityManager) (getActivity()
					.getSystemService(Context.CONNECTIVITY_SERVICE));
			NetworkInfo networkInfo = connectManager.getActiveNetworkInfo();
			if (null != networkInfo && networkInfo.isAvailable()) {
				isNetwork = true;
			} else {
				isNetwork = false;
			}

		}
	};

	@Override
	public void onDestroy() {
		getActivity().unregisterReceiver(mReceiver);
		super.onDestroy();
	}
	

}
