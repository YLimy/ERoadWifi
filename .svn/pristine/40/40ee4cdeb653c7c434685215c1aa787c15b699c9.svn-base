package com.e_road.ui;

import java.util.HashMap;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.e_road.R;
import com.e_road.utils.IConstant;
import com.e_road.utils.MobileUtil;
import com.e_road.utils.parser.LoginParser;
import com.e_road.utils.parser.RegisterParser;
import com.e_road.vo.RequestVo;
import com.e_road.vo.UserInfo;

public class LoginActivty extends BaseActivity {
	/** 判断是否其他页面跳转而来 */
	private boolean isLoginNot =  false;
	
	private EditText et_username;
	private EditText et_password;
	private EditText et_nickname;
	
	/** 提示信息 */
	private TextView tv_msg;
	
	private Button bt_login;
	private Button bt_regist;
	
	/** 是否显示昵称 */
	private boolean flag = true;
	
	private String mac;
	private String imei;
	private String model;
//	private String version;

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.bt_login_login:
			login();
			break;
			
		case R.id.bt_login_regist:
			regist();
			break;

		default:
			break;
		}
	}
	
	/**
	 * 登录
	 */
	private void login(){
		if(!flag){
			//注册跳转到登录界面
			tv_msg.setVisibility(View.GONE);
			cleanEditText();
			findViewById(R.id.ll_login_nick).setVisibility(View.GONE);
			flag = true;
			return;
		}
		//TODO 验证
		String username = et_username.getText().toString().trim();
		String password = et_password.getText().toString().trim();
		
		if(TextUtils.isEmpty(username)){
			Toast.makeText(this, "用户名不能为空", Toast.LENGTH_SHORT).show();
			return;
		}
		if(TextUtils.isEmpty(password)){
			Toast.makeText(this, "密码不能为空", Toast.LENGTH_SHORT).show();
			return;
		}
		
		tv_msg.setText("正在登录...");
		tv_msg.setVisibility(View.VISIBLE);
		
		int requestUrl = R.string.url_login;
		HashMap<String, String> map_login = new HashMap<String, String>();
		
		map_login.put("username", username);
		map_login.put("password", password);
		
		map_login.put("mac", mac);
		map_login.put("imei", imei);
		map_login.put("model", model);
//		map_login.put("version", version);
		
		LoginParser parser = new LoginParser();
		RequestVo requestVo = new RequestVo(requestUrl, this, map_login, parser);
		getDataFromServer(requestVo, new DataCallBack<Object>() {

			@Override
			public void progressData(Object param) {
				//隐藏提示信息
				tv_msg.setVisibility(View.GONE);
				//处理服务器返回结果
				if(param instanceof UserInfo){
					if(isLoginNot){
						setResult(IConstant.RESULTCODE_LOGIN_LOGIN);
						finish();
					}else{
						//TODO to 用户信息
						Toast.makeText(LoginActivty.this, "跳转到用户界面", Toast.LENGTH_SHORT).show();
						finish();
					}
				}else if((param instanceof String) && param.equals(IConstant.LOGIN_ERRO)){
					tv_msg.setText("用户名或密码错误");
					tv_msg.setVisibility(View.VISIBLE);
				}else{
					Toast.makeText(LoginActivty.this, "服务器异常", Toast.LENGTH_SHORT).show();
				}
			}
		});
	}
	
	/**
	 * 注册
	 */
	private void regist(){

		if(flag){
			//切换到注册页面
			tv_msg.setVisibility(View.GONE);
			cleanEditText();
			findViewById(R.id.ll_login_nick).setVisibility(View.VISIBLE);
			flag = false;
			return;
		}
		
		String nickname = et_nickname.getText().toString().trim();
		String username = et_username.getText().toString().trim();
		String password = et_password.getText().toString().trim();
		
		if(TextUtils.isEmpty(nickname)){
			Toast.makeText(this, "昵称不能为空", Toast.LENGTH_SHORT).show();
			return;
		}
		
		if(TextUtils.isEmpty(username)){
			Toast.makeText(this, "用户名不能为空", Toast.LENGTH_SHORT).show();
			return;
		}
		if(TextUtils.isEmpty(password)){
			Toast.makeText(this, "密码不能为空", Toast.LENGTH_SHORT).show();
			return;
		}
		
		//变更提示信息
		tv_msg.setText("正在提交数据");
		tv_msg.setVisibility(View.VISIBLE);
		
		int url_regist = R.string.url_regist;
		HashMap<String, String> map_regist = new HashMap<String, String>();
		map_regist.put("nickname", nickname);
		map_regist.put("username", username);
		map_regist.put("password", password);
		map_regist.put("mac", mac);
		map_regist.put("imei", imei);
		map_regist.put("model", model);
//		map_regist.put("version", version);
		RegisterParser registParser = new RegisterParser();
		RequestVo registReq = new RequestVo(url_regist, this, map_regist, registParser);
		getDataFromServer(registReq, new DataCallBack<Object>() {

			@Override
			public void progressData(Object param) {
				//隐藏提示信息
				tv_msg.setVisibility(View.GONE);
				
				if(param instanceof String){
					
					//用户名已存在 or 注册异常
					tv_msg.setText((String)param);
					tv_msg.setVisibility(View.VISIBLE);
					
				}else if(param instanceof UserInfo){
					
					//注册成功时返回UserInfo对象
					AlertDialog.Builder builder = new AlertDialog.Builder(LoginActivty.this);
					builder.setTitle("提示");
					builder.setMessage("注册成功");
					builder.setPositiveButton("确定", new OnClickListener() {
						
						@Override
						public void onClick(DialogInterface dialog, int which) {
							
							if(isLoginNot){
								setResult(IConstant.RESULTCODE_LOGIN_LOGIN);
								finish();
							}else{
								//TODO to 用户信息
								Toast.makeText(LoginActivty.this, "跳转到用户界面", Toast.LENGTH_SHORT).show();
							}
							
						}
					});
					builder.show();
				}
			}
		});
	}

	/**
	 * 清空编辑栏信息<br>
	 * 昵称，用户名，密码
	 */
	private void cleanEditText() {
		et_username.getText().clear();
		et_password.getText().clear();
		et_nickname.getText().clear();
	
}

	@Override
	public void loadView() {
		setContentView(R.layout.login);

	}

	@Override
	public void findViews() {
		et_username = (EditText) findViewById(R.id.et_login_username);
		et_password = (EditText) findViewById(R.id.et_login_password);
		et_nickname = (EditText) findViewById(R.id.et_login_nickname);
		bt_login = (Button) findViewById(R.id.bt_login_login);
		bt_regist = (Button) findViewById(R.id.bt_login_regist);
		tv_msg = (TextView) findViewById(R.id.tv_login_msg);
		tv_msg.setVisibility(View.GONE);
	}

	@Override
	public void setListener() {
		bt_login.setOnClickListener(this);
		bt_regist.setOnClickListener(this);
	}

	@Override
	public void progressLogic() {
		
		mac = MobileUtil.getPhoneMAC(this);    
		imei = MobileUtil.getPhoneIMEI(this);  
		model = MobileUtil.getPhoneModel(); 
//		version = MobileUtil.getPhoneVersion();
		
		if(getIntent().getStringExtra(IConstant.IK_BASE_LOGIN_NOT) != null){
			isLoginNot = true;
		}else{
			isLoginNot = false;
		}

	}

}
